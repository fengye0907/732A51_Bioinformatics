library(stringr)
library(markovchain)
library(phangorn)
library(msa)
F = function(x) njs(x)
tr0<-F(d0)
n1 <- rep("SB",1,33)           # names SB11 ~ SB43
n2 <- 11:43; names1 <- vector()
for (i in 1:33) {names1[i] <- paste0(n1[i],n2[i])}
set.seed(23333)          # create a phylogenetic tree with random order
mytree <- rtree(33, tip.label = names1)
plot(mytree)
title("A phylogenetic tree with random order")
## transition rate matrix from raw sequences
bin0 <- read.FASTA(file="lizard_seqs.fasta")
mcFit <- markovchainFit(data=as.character(bin0))
mat <- mcFit$estimate
a <-c(1,2,3,7)                 # avoid such nt as y, m, r, s
mat <- mat@transitionMatrix[a,a]
set.seed(23333)
simulation2 <- as.character(simSeq(mytree,l=2000,
type = "DNA", Q = mat,
# base composition of ACGT in raw sequences
bf=c(0.312, 0.205, 0.231, 0.252))
)
ape::write.dna(simulation2, file ="simulation2.fasta", format = "fasta",
append =FALSE, nbcol = 6, colsep = " ", colw = 10)
bin2 <- read.FASTA(file="simulation2.fasta")
bin2
a<- steadyStates(mcFit$estimate)[1,c(1,2,3,7)]
mc1 <- markovchainFit(data=as.character(bin1))
b<-steadyStates(mc1$estimate)[1,c(1,2,3,7)]
mc2 <- markovchainFit(data=as.character(bin2))
c<-steadyStates(mc2$estimate)
m <- rbind(original=a,artitcial1=b,artitcial2=c)
rownames(m) <- c("original","artifitial1","artifitial2")
m
cat("Original 33 lizard sequences:\n")
GC<-GC.content(bin0)
AT<-1-GC
BF<-base.freq(bin0)
paste("The base individual base composition of lizard sequences is:")
BF
paste("The GC content of lizard sequences is:")
GC
paste("The AT content of lizard sequences is:")
AT
cat("\n")
cat("The first artifitial 33 lizard sequences:\n")
bin1 <- read.FASTA(file="simulation.fasta")
GC<-GC.content(bin1)
AT<-1-GC
BF<-base.freq(bin1)
paste("The base individual base composition of the first simulation sequences is:")
BF
paste("The GC content of the first simulation sequences is:")
GC
paste("The AT content of the first simulation sequences is:")
AT
cat("\n")
cat("The second artifitial 33 lizard sequences:\n")
GC<-GC.content(bin2)
AT<-1-GC
BF<-base.freq(bin2)
paste("The base individual base composition of the second simulation sequences is:")
BF
paste("The GC content of the second simulation sequences is:")
GC
paste("The AT content of the second simulation sequences is:")
AT
z1 <- readAAStringSet("lizard_trans.fasta")
k1<-alphabetFrequency(z1)
summary1<-round(colMeans (k1, na.rm = FALSE, dims = 1))
paste("The amino acid composition of lizard sequences (by mean):")
summary1
cat("\n")
z2 <- readAAStringSet("simulation_trans.fasta")
k2<-alphabetFrequency(z2)
summary2<-round(colMeans (k2, na.rm = FALSE, dims = 1))
paste("The amino acid composition of the first simulation sequences (by mean):")
summary2
cat("\n")
z3 <- readAAStringSet("simulation2_trans.fasta")
k3<-alphabetFrequency(z3)
summary3<-round(colMeans (k3, na.rm = FALSE, dims = 1))
paste("The amino acid composition of the second simulation sequences (by mean):")
summary3
cat("\n")
paste("The number range of stop codons in lizard sequences:")
range(k1[,"*"])
paste("The number range of stop codons in the first simulation sequences:")
range(k2[,"*"])
paste("The number range of stop codons in the second simulation sequences:")
range(k3[,"*"])
paste("The number of simulation sequences without stop coden in lizard sequences:")
length(which(k1[,"*"]==0))
cat("Original 33 lizard sequences:\n")
mc0 <- markovchainFit(data=as.character(lizards_sequences))      # list(markovchain)
m0 <- mc0$estimate[c(1,2,3,7),c(1,2,3,7)]
m0
cat("\n")
cat("The first artifitial 33 lizard sequences:\n")
mc1 <- markovchainFit(data=as.character(bin1))
m1<-mc1$estimate[c(1,2,3,6),c(1,2,3,6)]
m1
cat("\n")
cat("The second artifitial 33 lizard sequences:\n")
mc2 <- markovchainFit(data=as.character(bin2))
m2<-mc2$estimate[c(1,2,3,4),c(1,2,3,4)]
m2
msa0 <- msaClustalW("lizard_seqs.fasta",type="dna")
print(msa0)
msa1 <- msaClustalW("simulation.fasta",type="dna")
print(msa1)
msa2 <- msaClustalW("simulation2.fasta",type="dna")
print(msa2)
align0 <- msaConvert(msa0, type="seqinr::alignment")
d0 <- seqinr::dist.alignment(align0, "identity")
Tree0 <- nj(d0)
Tree0$tip.label <- names(bin0)
align1 <- msaConvert(msa1, type="seqinr::alignment")
d1 <- seqinr::dist.alignment(align1, "identity")
Tree1 <- nj(d1)
Tree1$tip.label <- names(bin1)
align2 <- msaConvert(msa2, type="seqinr::alignment")
d2 <- seqinr::dist.alignment(align2, "identity")
Tree2 <- nj(d2)
Tree2$tip.label <- names(bin2)
align0 <- msaConvert(msa0, type="seqinr::alignment")
d0 <- seqinr::dist.alignment(align0, "identity")
Tree0 <- nj(d0)
Tree0$tip.label <- names(bin0)
align1 <- msaConvert(msa1, type="seqinr::alignment")
d1 <- seqinr::dist.alignment(align1, "identity")
Tree1 <- nj(d1)
Tree1$tip.label <- names(bin1)
align2 <- msaConvert(msa2, type="seqinr::alignment")
d2 <- seqinr::dist.alignment(align2, "identity")
Tree2 <- nj(d2)
Tree2$tip.label <- names(bin2)
heat0<-as.matrix(d0)
heatmap(heat0)
title("Heatmap for original sequence")
cat("\n")
heat1<-as.matrix(d1)
heatmap(heat1)
title("Heatmap for artificial sequence 1")
cat("\n")
heat2<-as.matrix(d2)
heatmap(heat2)
title("Heapmap for artificial sequence 2")
#boot strap and heat maps
y0 <- as.DNAbin(align0)
F = function(x) njs(x)
tr0<-F(d0)
v0 <- boot.phylo(phy =  tr0, x = y0,
FUN = F, quiet = T,
1000)
y1 <- as.DNAbin(align1)
tr1<-F(d1)
v1 <- boot.phylo(phy =  tr1, x = y1,
FUN = F, quiet = T,
1000)
y2 <- as.DNAbin(align2)
tr2<-F(d2)
v2 <- boot.phylo(phy =  tr2, x = y2,
FUN = F, quiet = T,
1000)
plot(tr1)
plot(tr0
)
Sys.setlocale(locale="english")
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(seqinr)
library(stringr)
library(markovchain)
library(phangorn)
library(msa)
install.packages("msa")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("msa")
Sys.setlocale(locale="english")
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(seqinr)
library(stringr)
library(markovchain)
library(phangorn)
library(msa)
lizards_accession_numbers <- c("JF806202", "HM161150", "FJ356743", "JF806205",
"JQ073190", "GU457971", "FJ356741", "JF806207",
"JF806210", "AY662592", "AY662591", "FJ356748",
"JN112660", "AY662594", "JN112661", "HQ876437",
"HQ876434", "AY662590", "FJ356740", "JF806214",
"JQ073188", "FJ356749", "JQ073189", "JF806216",
"AY662598", "JN112653", "JF806204", "FJ356747",
"FJ356744", "HQ876440", "JN112651", "JF806215",
"JF806209")
lizards_sequences<-ape::read.GenBank(lizards_accession_numbers)
ape::write.dna(lizards_sequences, file ="lizard_seqs.fasta", format = "fasta",
append =FALSE, nbcol = 6, colsep = " ", colw = 10)
bin0 <- read.FASTA(file="lizard_seqs.fasta")
bin0
## simulation function
simulate2 <- function(raw){
a <- as.data.frame(str_split(raw,""))
nt <- unique(a)           # all exist nucleotides
nt[,1] <- as.character(nt[,1])
nm <- vector()            # corresponding numbers
for (i in 1:nrow(nt)) {nm[i] <- str_count(raw,nt[i,1])}
res <- sample(nt[,1],nrow(a),rep = TRUE, prob=nm/nrow(a))
res
}
bin0
bin0$JF806202
ss0 <- read.fasta(file="lizard_seqs.fasta",as.string=TRUE)
simulation <- list()
for (i in 1:33) {
raw <- gsub(" ","", ss0[[i]])
simulation[[i]] <- simulate2(raw)
}
n1 <- rep("ZJ",1,33)          # names ZJ11 ~ ZJ43
n2 <- 11:43; names <- vector()
for (i in 1:33) {names[i] <- paste0(n1[i],n2[i])}
names(simulation) <- names
ape::write.dna(simulation, file ="simulation.fasta", format = "fasta",
append =FALSE, nbcol = 6, colsep = " ", colw = 10)
bin1 <- read.FASTA(file="simulation.fasta")
bin1
ss0
as.string(bin0$JF806202)
toString(bin0$JF806202)
n1 <- rep("SB",1,33)           # names SB11 ~ SB43
n2 <- 11:43; names1 <- vector()
for (i in 1:33) {names1[i] <- paste0(n1[i],n2[i])}
set.seed(23333)          # create a phylogenetic tree with random order
mytree <- rtree(33, tip.label = names1)
plot(mytree)
title("A phylogenetic tree with random order")
## transition rate matrix from raw sequences
bin0 <- read.FASTA(file="lizard_seqs.fasta")
mcFit <- markovchainFit(data=as.character(bin0))
mat <- mcFit$estimate
a <-c(1,2,3,7)                 # avoid such nt as y, m, r, s
mat <- mat@transitionMatrix[a,a]
set.seed(23333)
simulation2 <- as.character(simSeq(mytree,l=2000,
type = "DNA", Q = mat,
# base composition of ACGT in raw sequences
bf=c(0.312, 0.205, 0.231, 0.252))
)
ape::write.dna(simulation2, file ="simulation2.fasta", format = "fasta",
append =FALSE, nbcol = 6, colsep = " ", colw = 10)
bin2 <- read.FASTA(file="simulation2.fasta")
bin2
?markovchainFit
bin0
bin0$JF806202
as.character(bin0$JF806202)
as.character(bin0)
?as.character
## transition rate matrix from raw sequences
bin0 <- read.FASTA(file="lizard_seqs.fasta")
mcFit <- markovchainFit(data=as.character(bin0))
mat <- mcFit$estimate
a <-c(1,2,3,7)                 # avoid such nt as y, m, r, s
mat <- mat@transitionMatrix[a,a]
set.seed(23333)
simulation2 <- as.character(simSeq(mytree,l=2000,
type = "DNA", Q = mat,
# base composition of ACGT in raw sequences
bf=c(0.312, 0.205, 0.231, 0.252))
)
ape::write.dna(simulation2, file ="simulation2.fasta", format = "fasta",
append =FALSE, nbcol = 6, colsep = " ", colw = 10)
bin2 <- read.FASTA(file="simulation2.fasta")
bin2
a<- steadyStates(mcFit$estimate)[1,c(1,2,3,7)]
mc1 <- markovchainFit(data=as.character(bin1))
b<-steadyStates(mc1$estimate)[1,c(1,2,3,7)]
mc2 <- markovchainFit(data=as.character(bin2))
c<-steadyStates(mc2$estimate)
m <- rbind(original=a,artitcial1=b,artitcial2=c)
rownames(m) <- c("original","artifitial1","artifitial2")
m
mcFit
mcFit$estimate
steadyStates(mcFit$estimate)
?steadyStates
cat("Original 33 lizard sequences:\n")
GC<-GC.content(bin0)
AT<-1-GC
BF<-base.freq(bin0)
paste("The base individual base composition of lizard sequences is:")
BF
paste("The GC content of lizard sequences is:")
GC
paste("The AT content of lizard sequences is:")
AT
cat("\n")
cat("The first artifitial 33 lizard sequences:\n")
bin1 <- read.FASTA(file="simulation.fasta")
GC<-GC.content(bin1)
AT<-1-GC
BF<-base.freq(bin1)
paste("The base individual base composition of the first simulation sequences is:")
BF
paste("The GC content of the first simulation sequences is:")
GC
paste("The AT content of the first simulation sequences is:")
AT
cat("\n")
cat("The second artifitial 33 lizard sequences:\n")
GC<-GC.content(bin2)
AT<-1-GC
BF<-base.freq(bin2)
paste("The base individual base composition of the second simulation sequences is:")
BF
paste("The GC content of the second simulation sequences is:")
GC
paste("The AT content of the second simulation sequences is:")
AT
bin0
?base.freq
?base.freq(bin0)
base.freq(bin0)
class(bin0)
z1 <- readAAStringSet("lizard_trans.fasta")
k1<-alphabetFrequency(z1)
summary1<-round(colMeans (k1, na.rm = FALSE, dims = 1))
paste("The amino acid composition of lizard sequences (by mean):")
summary1
cat("\n")
z2 <- readAAStringSet("simulation_trans.fasta")
k2<-alphabetFrequency(z2)
summary2<-round(colMeans (k2, na.rm = FALSE, dims = 1))
paste("The amino acid composition of the first simulation sequences (by mean):")
summary2
cat("\n")
z3 <- readAAStringSet("simulation2_trans.fasta")
k3<-alphabetFrequency(z3)
summary3<-round(colMeans (k3, na.rm = FALSE, dims = 1))
paste("The amino acid composition of the second simulation sequences (by mean):")
summary3
cat("\n")
paste("The number range of stop codons in lizard sequences:")
range(k1[,"*"])
paste("The number range of stop codons in the first simulation sequences:")
range(k2[,"*"])
paste("The number range of stop codons in the second simulation sequences:")
range(k3[,"*"])
paste("The number of simulation sequences without stop coden in lizard sequences:")
length(which(k1[,"*"]==0))
cat("Original 33 lizard sequences:\n")
mc0 <- markovchainFit(data=as.character(lizards_sequences))      # list(markovchain)
m0 <- mc0$estimate[c(1,2,3,7),c(1,2,3,7)]
m0
cat("\n")
cat("The first artifitial 33 lizard sequences:\n")
mc1 <- markovchainFit(data=as.character(bin1))
m1<-mc1$estimate[c(1,2,3,6),c(1,2,3,6)]
m1
cat("\n")
cat("The second artifitial 33 lizard sequences:\n")
mc2 <- markovchainFit(data=as.character(bin2))
m2<-mc2$estimate[c(1,2,3,4),c(1,2,3,4)]
m2
?steadyStates
steadyStates(mc2$estimate)
sum(steadyStates(mc2$estimate))
msa0 <- msaClustalW("lizard_seqs.fasta",type="dna")
print(msa0)
msa1 <- msaClustalW("simulation.fasta",type="dna")
print(msa1)
msa2 <- msaClustalW("simulation2.fasta",type="dna")
print(msa2)
?msa
?msaClustalW
align0 <- msaConvert(msa0, type="seqinr::alignment")
d0 <- seqinr::dist.alignment(align0, "identity")
Tree0 <- nj(d0)
Tree0$tip.label <- names(bin0)
align1 <- msaConvert(msa1, type="seqinr::alignment")
d1 <- seqinr::dist.alignment(align1, "identity")
Tree1 <- nj(d1)
Tree1$tip.label <- names(bin1)
align2 <- msaConvert(msa2, type="seqinr::alignment")
d2 <- seqinr::dist.alignment(align2, "identity")
Tree2 <- nj(d2)
Tree2$tip.label <- names(bin2)
heat0<-as.matrix(d0)
heatmap(heat0)
title("Heatmap for original sequence")
cat("\n")
heat1<-as.matrix(d1)
heatmap(heat1)
title("Heatmap for artificial sequence 1")
cat("\n")
heat2<-as.matrix(d2)
heatmap(heat2)
title("Heapmap for artificial sequence 2")
plot(Tree0)
plot(Tree1)
plot(Tree2)
plot(Tree0)
#boot strap and heat maps
y0 <- as.DNAbin(align0)
F = function(x) njs(x)
tr0<-F(d0)
v0 <- boot.phylo(phy =  tr0, x = y0,
FUN = F, quiet = T,
1000)
y1 <- as.DNAbin(align1)
tr1<-F(d1)
v1 <- boot.phylo(phy =  tr1, x = y1,
FUN = F, quiet = T,
1000)
y2 <- as.DNAbin(align2)
tr2<-F(d2)
v2 <- boot.phylo(phy =  tr2, x = y2,
FUN = F, quiet = T,
1000)
# construct the trees
paste("The bootstrap results of original sequence is:")
v0
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for original sequence")
paste("The bootstrap results of artificial sequence 1 is:")
v1
p2<-plot(tr1, use.edge.length = T)
nodelabels(v1, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for artificial sequence 1")
paste("The bootstrap results of artificial sequence 2 is:")
v2
p3<-plot(tr2, use.edge.length = T)
nodelabels(v2, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for artificial sequence 2")
?boot.phylo
?msaConvert
d0
?seqinr::dist.alignment
# construct the trees
paste("The bootstrap results of original sequence is:")
v0
? boot.phylo
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for original sequence")
paste("The bootstrap results of original sequence is:")
v0
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for original sequence")
# construct the trees
paste("The bootstrap results of original sequence is:")
v0
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for original sequence")
# construct the trees
paste("The bootstrap results of original sequence is:")
v0
p1<- plot(tr0, use.edge.length = T)
nodelabels(v0, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for original sequence")
paste("The bootstrap results of artificial sequence 1 is:")
v1
p2<-plot(tr1, use.edge.length = T)
nodelabels(v1, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for artificial sequence 1")
paste("The bootstrap results of artificial sequence 2 is:")
v2
p3<-plot(tr2, use.edge.length = T)
nodelabels(v2, adj = c(1.2, 1.2), frame = "none")
title("Phylogenetic tree for artificial sequence 2")
#distances between the trees
Dist1 <- dist.topo(tr0,tr1)
Dist2 <- dist.topo(tr1,tr2)
Dist3 <- dist.topo(tr2,tr0)
# using ape, distory, phangorn, phyloTop, TotalCopheneticIndex or treespace R packages
#Using ape, compare between original and artificial 1 trees
ape::comparePhylo(tr0,tr1, plot = TRUE, force.rooted = TRUE)
# using phyloTop package to count ladder size of trees
phyloTop::ladderSizes(tr0)
phyloTop::ladderSizes(tr1)
# using phangorn package
phangorn::treedist(tr0,tr1, check.labels = TRUE)
# using distory we have done dist.dna
# using TotalCopheneticIndex
TotalCopheneticIndex::tci(tr0)
alphabetFrequency("acgggt")
Sys.setlocale(locale="english")
knitr::opts_chunk$set(echo = TRUE)
library(ape)
library(seqinr)
library(stringr)
library(markovchain)
library(phangorn)
library(msa)
z1 <- readAAStringSet("lizard_trans.fasta")
k1<-alphabetFrequency(z1)
z1
k1
